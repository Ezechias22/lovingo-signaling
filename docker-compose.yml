# signaling_server/docker-compose.yml - CONFIGURATION DOCKER COMPOSE
version: '3.8'

services:
  # Serveur de signaling WebRTC
  signaling-server:
    build: .
    container_name: webrtc-signaling
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
    networks:
      - webrtc-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis pour mise à l'échelle (optionnel)
  redis:
    image: redis:7-alpine
    container_name: webrtc-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - webrtc-network
    command: redis-server --appendonly yes
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # Nginx reverse proxy (optionnel)
  nginx:
    image: nginx:alpine
    container_name: webrtc-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - webrtc-network
    depends_on:
      - signaling-server
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: webrtc-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - webrtc-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana pour visualisation (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: webrtc-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - webrtc-network
    depends_on:
      - prometheus

networks:
  webrtc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local